// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum ProductCategory {
  MAN
  WOMAN
  SHOES
  ACCESSORIES
}

enum ProductType {
  TSHIRT
  HOODIE
  SWEATER
  COAT
  DRESS
  JEANS
  SWEATPANTS
  TROUSERS
  SNEAKERS
  PUMPS
  FLATSHOES
  SPORTSHOES
  WATCH
  BELT
  BAG
  CAP
}

enum UserRole {
  ADMIN
  USER
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @default(now())
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  password      String?
  image         String?
  role          UserRole  @default(USER)
  orders        Order[]
  wishlist      Product[] @relation("WishlistProducts")
  accounts      Account[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Product {
  id           String           @id @default(cuid())
  name         String
  price        Float 
  discountPercentage      Float?
  category     ProductCategory
  subcategory  String?
  type         ProductType
  orders       ProductInOrder[]
  imgUrl       String
  size         String[]
  wishlistedBy User[]           @relation("WishlistProducts")
}

model Order {
  id           String           @id @default(cuid())
  orderNumber  Int              @unique @default(autoincrement())
  createdAt    DateTime         @default(now()) @map(name: "created_at")
  user         User             @relation(fields: [userId], references: [id])
  userId       String
  products     ProductInOrder[]
  totalPrice   Float
  totalItems   Float
  shippingName String
  phoneNumber  String
  city         String
  zip          String
  street       String
  number       String
}

model ProductInOrder {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  size      String?
 
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
